/* 
 * @(#)HttpUtils.java    Created on 2011-2-18
 * Copyright (c) 2011 ZDSoft Networks, Inc. All rights reserved.
 * $Id: HttpUtils.java 33829 2012-12-26 05:28:54Z xuan $
 */
package com.winupon.andframe.bigapple.http2.urlconnection;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.Map;

import android.text.TextUtils;
import android.util.Log;

/**
 * 提供访问HTTP服务的工具类
 * 
 * @author xuan
 * @version $Revision: 1.0 $, $Date: 2013-3-25 上午9:24:40 $
 */
public abstract class HttpUtils {
    public static final boolean DEBUG = false;
    private static final String TAG = "bigapple.HttpUtils";

    private static final int DEFAULT_CONNECTION_TIMEOUT = 1000 * 12;
    private static final int DEFAULT_READ_TIMEOUT = 1000 * 12;
    private static final int DEFAULT_DOWNLOAD_READ_TIMEOUT = 1000 * 60 * 10;
    private static final String DEFAULT_ENCODE = "utf-8";

    private static final int DEDAULT_BUFFER_SIZE = 8 * 1024;

    /**
     * GET请求，可带参数，使用UTF-8编码，连接超时和请求超时默认12s
     * 
     * @param url
     * @return
     * @throws IOException
     */
    public static String get(String url) throws IOException {
        return get(url, null, DEFAULT_ENCODE, DEFAULT_CONNECTION_TIMEOUT, DEFAULT_READ_TIMEOUT);
    }

    /**
     * GET请求
     * 
     * @param url
     * @param encoding
     *            编码
     * @param connectionTimeout
     *            连接超时，-1表示默认
     * @param readTimeout
     *            读取超时，-1表示默认
     * @return
     * @throws IOException
     */
    public static String execute(String url, Map<String, String> params, String encoding, int connectionTimeout,
            int readTimeout, String method) throws IOException {
        if (TextUtils.isEmpty(encoding)) {
            encoding = DEFAULT_ENCODE;
        }

        if (-1 == connectionTimeout) {
            connectionTimeout = DEFAULT_CONNECTION_TIMEOUT;
        }

        if (-1 == readTimeout) {
            readTimeout = DEFAULT_READ_TIMEOUT;
        }

        // 拼接get地址的参数
        if (null != params) {
            StringBuilder sb = new StringBuilder();
            for (Map.Entry<String, String> e : params.entrySet()) {
                sb.append(e.getKey()).append("=").append(e.getValue()).append("&");
            }

            if (!params.isEmpty()) {
                sb.deleteCharAt(sb.length() - 1);
            }
            url += "?" + sb.toString();
        }

        if (DEBUG) {
            Log.d(TAG, url);
        }

        String result = null;
        BufferedReader reader = null;
        try {
            URLConnection connection = new URL(url).openConnection();
            connection.setConnectTimeout(connectionTimeout);
            connection.setReadTimeout(readTimeout);

            if ("post".equals(method)) {
                connection.setDoOutput(true);
                // connection.setRequestMethod("POST");
                connection.setUseCaches(false);
            }

            reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding),
                    DEDAULT_BUFFER_SIZE);

            StringBuilder buffer = new StringBuilder();
            String line = reader.readLine();
            if (line != null) {
                buffer.append(line);
                while ((line = reader.readLine()) != null) {
                    buffer.append("\n" + line);
                }
            }

            result = buffer.toString();
        }
        catch (IOException e) {
            Log.e(TAG, "get url[" + url + "] error");
            throw e;
        }
        finally {
            if (reader != null) {
                try {
                    reader.close();
                }
                catch (IOException e1) {
                    // Ignore
                }
            }
        }

        return result;
    }

    /**
     * 下载文件
     * 
     * @param downloadUrl
     * @param file
     * @return
     * @throws Exception
     */
    public static void download(String url, File file) throws Exception {
        if (null == file) {
            throw new IOException("file not be null!");
        }

        if (!createFileParent(file)) {
            Log.e(TAG, "create file[" + file.getPath() + "] parent error");
        }

        InputStream in = null;
        OutputStream out = null;
        try {
            File parentFile = file.getParentFile();
            if (!parentFile.exists() || !parentFile.isDirectory()) {
                parentFile.mkdirs();
            }

            URLConnection connection = new URL(url).openConnection();
            connection.setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT);
            connection.setReadTimeout(DEFAULT_DOWNLOAD_READ_TIMEOUT);

            in = connection.getInputStream();
            out = new BufferedOutputStream(new FileOutputStream(file));
            byte[] bs = new byte[DEDAULT_BUFFER_SIZE];
            int bytesReaded = 0;
            while ((bytesReaded = in.read(bs)) != -1) {
                out.write(bs, 0, bytesReaded);
            }
        }
        catch (Exception e) {
            Log.e(TAG, "download file from url[" + url + "] error", e);
            file.delete();
            throw e;
        }
        finally {
            if (in != null) {
                try {
                    in.close();
                }
                catch (IOException e) {
                    // Ignore
                }
            }

            if (out != null) {
                try {
                    out.close();
                }
                catch (IOException e) {
                    // Ignore
                }
            }
        }
    }

    /**
     * 给File创建父亲文件夹
     * 
     * @param file
     * @return
     */
    public static boolean createFileParent(File file) {
        boolean isSuccess = false;

        if (null == file) {
            return isSuccess;
        }

        File parentFile = file.getParentFile();
        if (null != parentFile) {
            isSuccess = parentFile.mkdirs();
        }

        return isSuccess;
    }

}
