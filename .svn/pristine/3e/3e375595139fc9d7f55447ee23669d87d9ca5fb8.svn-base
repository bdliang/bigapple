<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    package com.winupon.andframe.bigapple.utils.uuid;<a name="line.1"></a>
<FONT color="green">002</FONT>    <a name="line.2"></a>
<FONT color="green">003</FONT>    import java.net.InetAddress;<a name="line.3"></a>
<FONT color="green">004</FONT>    <a name="line.4"></a>
<FONT color="green">005</FONT>    /**<a name="line.5"></a>
<FONT color="green">006</FONT>     * ÈöèÂç≥‰∏≤ÁîüÊàêÂ∑•ÂÖ?<a name="line.6"></a>
<FONT color="green">007</FONT>     * <a name="line.7"></a>
<FONT color="green">008</FONT>     * @author xuan<a name="line.8"></a>
<FONT color="green">009</FONT>     * @version $Revision: 245 $, $Date: 2012-03-26 14:01:51 +0800 (ÊòüÊúü‰∏? 26 ‰∏âÊúà 2012) $<a name="line.9"></a>
<FONT color="green">010</FONT>     */<a name="line.10"></a>
<FONT color="green">011</FONT>    public class UUIDGenerator {<a name="line.11"></a>
<FONT color="green">012</FONT>        private static final int IP;<a name="line.12"></a>
<FONT color="green">013</FONT>        static {<a name="line.13"></a>
<FONT color="green">014</FONT>            int ipadd;<a name="line.14"></a>
<FONT color="green">015</FONT>            try {<a name="line.15"></a>
<FONT color="green">016</FONT>                ipadd = toInt(InetAddress.getLocalHost().getAddress());<a name="line.16"></a>
<FONT color="green">017</FONT>            }<a name="line.17"></a>
<FONT color="green">018</FONT>            catch (Exception e) {<a name="line.18"></a>
<FONT color="green">019</FONT>                ipadd = 0;<a name="line.19"></a>
<FONT color="green">020</FONT>            }<a name="line.20"></a>
<FONT color="green">021</FONT>            IP = ipadd;<a name="line.21"></a>
<FONT color="green">022</FONT>        }<a name="line.22"></a>
<FONT color="green">023</FONT>        private static short counter = (short) 0;<a name="line.23"></a>
<FONT color="green">024</FONT>        private static final int JVM = (int) (System.currentTimeMillis() &gt;&gt;&gt; 8);<a name="line.24"></a>
<FONT color="green">025</FONT>    <a name="line.25"></a>
<FONT color="green">026</FONT>        public UUIDGenerator() {<a name="line.26"></a>
<FONT color="green">027</FONT>        }<a name="line.27"></a>
<FONT color="green">028</FONT>    <a name="line.28"></a>
<FONT color="green">029</FONT>        public static String generateHex() {<a name="line.29"></a>
<FONT color="green">030</FONT>            return new StringBuffer(36).append(format(getIP())).append(format(getJVM())).append(format(getHighTime()))<a name="line.30"></a>
<FONT color="green">031</FONT>                    .append(format(getLowTime())).append(format(getCount())).toString();<a name="line.31"></a>
<FONT color="green">032</FONT>        }<a name="line.32"></a>
<FONT color="green">033</FONT>    <a name="line.33"></a>
<FONT color="green">034</FONT>        public static byte[] generateBytes() {<a name="line.34"></a>
<FONT color="green">035</FONT>            byte[] bytes = new byte[16];<a name="line.35"></a>
<FONT color="green">036</FONT>            System.arraycopy(getBytes(getIP()), 0, bytes, 0, 4);<a name="line.36"></a>
<FONT color="green">037</FONT>            System.arraycopy(getBytes(getJVM()), 0, bytes, 4, 4);<a name="line.37"></a>
<FONT color="green">038</FONT>            System.arraycopy(getBytes(getHighTime()), 0, bytes, 8, 2);<a name="line.38"></a>
<FONT color="green">039</FONT>            System.arraycopy(getBytes(getLowTime()), 0, bytes, 10, 4);<a name="line.39"></a>
<FONT color="green">040</FONT>            System.arraycopy(getBytes(getCount()), 0, bytes, 14, 2);<a name="line.40"></a>
<FONT color="green">041</FONT>            return bytes;<a name="line.41"></a>
<FONT color="green">042</FONT>        }<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>        private static String format(int intval) {<a name="line.44"></a>
<FONT color="green">045</FONT>            String formatted = Integer.toHexString(intval);<a name="line.45"></a>
<FONT color="green">046</FONT>            StringBuffer buf = new StringBuffer("00000000");<a name="line.46"></a>
<FONT color="green">047</FONT>            buf.replace(8 - formatted.length(), 8, formatted);<a name="line.47"></a>
<FONT color="green">048</FONT>            return buf.toString();<a name="line.48"></a>
<FONT color="green">049</FONT>        }<a name="line.49"></a>
<FONT color="green">050</FONT>    <a name="line.50"></a>
<FONT color="green">051</FONT>        private static String format(short shortval) {<a name="line.51"></a>
<FONT color="green">052</FONT>            String formatted = Integer.toHexString(shortval);<a name="line.52"></a>
<FONT color="green">053</FONT>            StringBuffer buf = new StringBuffer("0000");<a name="line.53"></a>
<FONT color="green">054</FONT>            buf.replace(4 - formatted.length(), 4, formatted);<a name="line.54"></a>
<FONT color="green">055</FONT>            return buf.toString();<a name="line.55"></a>
<FONT color="green">056</FONT>        }<a name="line.56"></a>
<FONT color="green">057</FONT>    <a name="line.57"></a>
<FONT color="green">058</FONT>        /**<a name="line.58"></a>
<FONT color="green">059</FONT>         * Unique across JVMs on this machine (unless they load this class in the same quater second - very unlikely)<a name="line.59"></a>
<FONT color="green">060</FONT>         */<a name="line.60"></a>
<FONT color="green">061</FONT>        private static int getJVM() {<a name="line.61"></a>
<FONT color="green">062</FONT>            return JVM;<a name="line.62"></a>
<FONT color="green">063</FONT>        }<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>        /**<a name="line.65"></a>
<FONT color="green">066</FONT>         * Unique in a millisecond for this JVM instance (unless there are &gt; Short.MAX_VALUE instances created in a<a name="line.66"></a>
<FONT color="green">067</FONT>         * millisecond)<a name="line.67"></a>
<FONT color="green">068</FONT>         */<a name="line.68"></a>
<FONT color="green">069</FONT>        private static short getCount() {<a name="line.69"></a>
<FONT color="green">070</FONT>            synchronized (UUIDGenerator.class) {<a name="line.70"></a>
<FONT color="green">071</FONT>                if (counter &lt; 0) {<a name="line.71"></a>
<FONT color="green">072</FONT>                    counter = 0;<a name="line.72"></a>
<FONT color="green">073</FONT>                }<a name="line.73"></a>
<FONT color="green">074</FONT>                return counter++;<a name="line.74"></a>
<FONT color="green">075</FONT>            }<a name="line.75"></a>
<FONT color="green">076</FONT>        }<a name="line.76"></a>
<FONT color="green">077</FONT>    <a name="line.77"></a>
<FONT color="green">078</FONT>        /**<a name="line.78"></a>
<FONT color="green">079</FONT>         * Unique in a local network<a name="line.79"></a>
<FONT color="green">080</FONT>         */<a name="line.80"></a>
<FONT color="green">081</FONT>        private static int getIP() {<a name="line.81"></a>
<FONT color="green">082</FONT>            return IP;<a name="line.82"></a>
<FONT color="green">083</FONT>        }<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>        /**<a name="line.85"></a>
<FONT color="green">086</FONT>         * Unique down to millisecond<a name="line.86"></a>
<FONT color="green">087</FONT>         */<a name="line.87"></a>
<FONT color="green">088</FONT>        private static short getHighTime() {<a name="line.88"></a>
<FONT color="green">089</FONT>            return (short) (System.currentTimeMillis() &gt;&gt;&gt; 32);<a name="line.89"></a>
<FONT color="green">090</FONT>        }<a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>        private static int getLowTime() {<a name="line.92"></a>
<FONT color="green">093</FONT>            return (int) System.currentTimeMillis();<a name="line.93"></a>
<FONT color="green">094</FONT>        }<a name="line.94"></a>
<FONT color="green">095</FONT>    <a name="line.95"></a>
<FONT color="green">096</FONT>        private static int toInt(byte[] bytes) {<a name="line.96"></a>
<FONT color="green">097</FONT>            int result = 0;<a name="line.97"></a>
<FONT color="green">098</FONT>            for (int i = 0; i &lt; 4; i++) {<a name="line.98"></a>
<FONT color="green">099</FONT>                result = (result &lt;&lt; 8) - Byte.MIN_VALUE + bytes[i];<a name="line.99"></a>
<FONT color="green">100</FONT>            }<a name="line.100"></a>
<FONT color="green">101</FONT>            return result;<a name="line.101"></a>
<FONT color="green">102</FONT>        }<a name="line.102"></a>
<FONT color="green">103</FONT>    <a name="line.103"></a>
<FONT color="green">104</FONT>        private static byte[] getBytes(int intval) {<a name="line.104"></a>
<FONT color="green">105</FONT>            return new byte[] { (byte) (intval &gt;&gt; 24), (byte) (intval &gt;&gt; 16), (byte) (intval &gt;&gt; 8), (byte) intval };<a name="line.105"></a>
<FONT color="green">106</FONT>        }<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>        private static byte[] getBytes(short shortval) {<a name="line.108"></a>
<FONT color="green">109</FONT>            return new byte[] { (byte) (shortval &gt;&gt; 8), (byte) shortval };<a name="line.109"></a>
<FONT color="green">110</FONT>        }<a name="line.110"></a>
<FONT color="green">111</FONT>    <a name="line.111"></a>
<FONT color="green">112</FONT>        public static String toHexString(byte[] bytes) {<a name="line.112"></a>
<FONT color="green">113</FONT>            StringBuffer hexString = new StringBuffer();<a name="line.113"></a>
<FONT color="green">114</FONT>    <a name="line.114"></a>
<FONT color="green">115</FONT>            for (int i = 0; i &lt; bytes.length; i++) {<a name="line.115"></a>
<FONT color="green">116</FONT>                hexString.append(enoughZero(Integer.toHexString(bytes[i] &amp; 0xff), 2));<a name="line.116"></a>
<FONT color="green">117</FONT>            }<a name="line.117"></a>
<FONT color="green">118</FONT>            return hexString.toString();<a name="line.118"></a>
<FONT color="green">119</FONT>        }<a name="line.119"></a>
<FONT color="green">120</FONT>    <a name="line.120"></a>
<FONT color="green">121</FONT>        public static String enoughZero(String str, int len) {<a name="line.121"></a>
<FONT color="green">122</FONT>            while (str.length() &lt; len) {<a name="line.122"></a>
<FONT color="green">123</FONT>                str = "0" + str;<a name="line.123"></a>
<FONT color="green">124</FONT>            }<a name="line.124"></a>
<FONT color="green">125</FONT>            return str;<a name="line.125"></a>
<FONT color="green">126</FONT>        }<a name="line.126"></a>
<FONT color="green">127</FONT>    <a name="line.127"></a>
<FONT color="green">128</FONT>        public static void main(String[] args) {<a name="line.128"></a>
<FONT color="green">129</FONT>            // UUIDGenerator generator = new UUIDGenerator();<a name="line.129"></a>
<FONT color="green">130</FONT>            System.out.println(UUIDGenerator.generateHex());<a name="line.130"></a>
<FONT color="green">131</FONT>        }<a name="line.131"></a>
<FONT color="green">132</FONT>    <a name="line.132"></a>
<FONT color="green">133</FONT>    }<a name="line.133"></a>




























































</PRE>
</BODY>
</HTML>
